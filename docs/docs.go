// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2020-05-17 03:24:56.568205 -0400 EDT m=+0.077665242

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Dr. Andy Meneely",
            "url": "http://www.github.com/andymeneely",
            "email": "axmvse@rit.edu"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/churn-metrics/aggr": {
            "get": {
                "description": "Provides Aggregated churn details of all the files for a given commit",
                "produces": [
                    "application/json"
                ],
                "summary": "Provides Aggregate churn details for a given commit",
                "parameters": [
                    {
                        "type": "string",
                        "description": "repo Url",
                        "name": "repoUrl",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "commit Id",
                        "name": "commitId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "true",
                        "description": "Should whitespaces be considered?",
                        "name": "whitespace",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/metrics.AggrChurMetrics"
                        }
                    }
                }
            }
        },
        "/churn-metrics/file": {
            "get": {
                "description": "Provides churn details for a given commit and for the specified file",
                "produces": [
                    "application/json"
                ],
                "summary": "Provides churn details for a given commit",
                "parameters": [
                    {
                        "type": "string",
                        "description": "repo Url",
                        "name": "repoUrl",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "commit Id",
                        "name": "commitId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "true",
                        "description": "Should whitespaces be considered?",
                        "name": "whitespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "file path",
                        "name": "filepath",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/metrics.FileChurnMetrics"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "metrics.AggrChurMetrics": {
            "type": "object",
            "properties": {
                "Commit_Author": {
                    "type": "string",
                    "example": "test@test.edu"
                },
                "Deleted_Lines_Count": {
                    "type": "integer",
                    "example": 10
                },
                "Interactive_Churn_Count": {
                    "type": "integer",
                    "example": 6
                },
                "Self_Churn_Count": {
                    "type": "integer",
                    "example": 6
                },
                "aggrDiffMetrics": {
                    "type": "object",
                    "$ref": "#/definitions/metrics.AggrDiffMetrics"
                }
            }
        },
        "metrics.AggrDiffMetrics": {
            "type": "object",
            "properties": {
                "deletedFiles": {
                    "type": "integer"
                },
                "deletions": {
                    "type": "integer"
                },
                "filesCount": {
                    "type": "integer"
                },
                "insertions": {
                    "type": "integer"
                },
                "linesAfter": {
                    "type": "integer"
                },
                "linesBefore": {
                    "type": "integer"
                },
                "newFiles": {
                    "type": "integer"
                }
            }
        },
        "metrics.FileChurnMetrics": {
            "type": "object",
            "properties": {
                "Commit_Author": {
                    "type": "string",
                    "example": "test@test.edu"
                },
                "Deleted_Lines_Count": {
                    "type": "integer",
                    "example": 10
                },
                "File_Path": {
                    "type": "string",
                    "example": "relative/path/to/file.go"
                },
                "Interactive_Churn_Count": {
                    "type": "integer",
                    "example": 6
                },
                "Self_Churn_Count": {
                    "type": "integer",
                    "example": 6
                },
                "churnDetails": {
                    "description": "Map of CommitId, Author",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "fileDiffMetrics": {
                    "type": "object",
                    "$ref": "#/definitions/metrics.FileDiffMetrics"
                }
            }
        },
        "metrics.FileDiffMetrics": {
            "type": "object",
            "properties": {
                "deleteFile": {
                    "type": "boolean"
                },
                "deletions": {
                    "type": "integer"
                },
                "file": {
                    "type": "string"
                },
                "insertions": {
                    "type": "integer"
                },
                "linesAfter": {
                    "type": "integer"
                },
                "linesBefore": {
                    "type": "integer"
                },
                "newFile": {
                    "type": "boolean"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8080",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Swagger Git-Churn API",
	Description: "APIs to get Git-churn metrices.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
